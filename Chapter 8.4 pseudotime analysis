setwd("/Users/suifangmao/Chapter 8")
library(SingleCellExperiment)
BiocManager::install("TSCAN")
library(TSCAN)
library(numDeriv)
library(M3Drop)
BiocManager::install("monocle")
library(monocle)
BiocManager::install("destiny")
library(destiny)
library(SLICER)

# Questions: can't access to ouija
#solution-1: failed
BiocManager::install("ouija")
# not available

#solution-2: it works, I am going to continue to work on it.
install.packages("devtools")
devtools::install_github("kieranrcampbell/ouija")
library(ouija)

library(scater)
library(ggplot2)
library(ggthemes)
library(ggbeeswarm)
#install.packages("corrplot")
library(corrplot)
set.seed(1)

#8.4.1
deng_SCE <- readRDS("deng-reads.rds")
deng_SCE$cell_type2 <- factor(
  deng_SCE$cell_type2,
  levels = c("zy", "early2cell", "mid2cell", "late2cell",
             "4cell", "8cell", "16cell", "earlyblast",
             "midblast", "lateblast")
)
cellLabels <- deng_SCE$cell_type2
deng <- counts(deng_SCE)
colnames(deng) <- cellLabels
deng_SCE <- runPCA(deng_SCE)
plotPCA(deng_SCE, colour_by = "cell_type2")

# Naive pseudotime: co-ordinates of the first principal component vs cell types
deng_SCE$PC1 <- reducedDim(deng_SCE, "PCA")[,1] # the first column is PC1
## question: Why do we need to use the "reducedDim" to calculate PC1?
## Answer: if we need to plot PCA plot, we need it? 
# input data frame for ggplot
ggplot(as.data.frame(colData(deng_SCE)), aes(x = PC1, y = cell_type2, 
                                             colour = cell_type2)) +
  geom_quasirandom(groupOnX = FALSE) +
  scale_color_tableau() + theme_classic() +
  xlab("First principal component") + ylab("Timepoint") +
  ggtitle("Cells ordered by first principal component")

## 8.4.2 TSCAN
# 1st: use mclust to cluster cells based on normal distribution
# 2nd: This generate a tree connectiong clusters
# 3rd: the branch that connects the largest number of cluster is too determine pseudotime
procdeng <- TSCAN::preprocess(deng) # convert each cells to normal distribution?
colnames(procdeng) <- 1:ncol(deng) 
dengclust <- TSCAN::exprmclust(procdeng, clusternum = 10) # make 10 clusters based each cells' normal distribution 
# if we try 6 and 12 clusters
dengclust <- TSCAN::exprmclust(procdeng, clusternum = 6)
#output: did not remove anycells
dengclust <- TSCAN::exprmclust(procdeng, clusternum = 12)
#output: Removed 48 rows containing missing values (position_quasirandom).
TSCAN::plotmclust(dengclust)

## key step here: determine the psedotime for each cell
dengorderTSCAN <- TSCAN::TSCANorder(dengclust, orderonly = FALSE)
# head(dengorderTSCAN)
#       sample_name State Pseudotime
#             88     5          1
## here, TSCAN only determine the peudotime for 221 out of 268 cells. There are missing values
pseudotime_order_tscan <- as.character(dengorderTSCAN$sample_name)
# length(pseudotime_order_tscan)
# [1] 221

# assign 268 cells with NA
deng_SCE$pseudotime_order_tscan <- NA 
# Then assign 268 with pseudotime determination
deng_SCE$pseudotime_order_tscan[as.numeric(dengorderTSCAN$sample_name)] <- 
  dengorderTSCAN$Pseudotime

cellLabels[dengclust$clusterid == 10] #examine which timepoints have been assigned to each state


ggplot(as.data.frame(colData(deng_SCE)), 
       aes(x = pseudotime_order_tscan, 
           y = cell_type2, colour = cell_type2)) +
  geom_quasirandom(groupOnX = FALSE) +
  scale_color_tableau() + theme_classic() +
  xlab("TSCAN pseudotime") + ylab("Timepoint") +
  ggtitle("Cells ordered by TSCAN pseudotime")

#8.4.3 monocle
# w/o clustering, yet use reduced-dimension to ID longest path; not good when all genes are used
# 1st:feature selection

m3dGenes <- as.character(
  M3DropFeatureSelection(deng)$Gene
)
#output: Removing 1134 undetected genes.
# Interestingly, it is similar to the function in chpater 8.2
# expr_matrix <- M3Drop::M3DropConvertData(deng)

d <- deng[which(rownames(deng) %in% m3dGenes), ]
d <- d[!duplicated(rownames(d)), ]

colnames(d) <- 1:ncol(d)
geneNames <- rownames(d)
rownames(d) <- 1:nrow(d)
pd <- data.frame(timepoint = cellLabels)
pd <- new("AnnotatedDataFrame", data=pd)
fd <- data.frame(gene_short_name = geneNames)
fd <- new("AnnotatedDataFrame", data=fd)

dCellData <- newCellDataSet(d, phenoData = pd, featureData = fd, expressionFamily = tobit())
dCellData <- setOrderingFilter(dCellData, which(geneNames %in% m3dGenes))
dCellData <- estimateSizeFactors(dCellData)
dCellDataSet <- reduceDimension(dCellData, pseudo_expr = 1)
dCellDataSet <- orderCells(dCellDataSet, reverse = FALSE)
plot_cell_trajectory(dCellDataSet)

# Store the ordering
pseudotime_monocle <-
  data.frame(
    Timepoint = phenoData(dCellDataSet)$timepoint,
    pseudotime = phenoData(dCellDataSet)$Pseudotime,
    State = phenoData(dCellDataSet)$State
  )
rownames(pseudotime_monocle) <- 1:ncol(d)
pseudotime_order_monocle <-
  rownames(pseudotime_monocle[order(pseudotime_monocle$pseudotime), ])

# Compare the inferred pseudotime to known cell timepoints
deng_SCE$pseudotime_monocle <- pseudotime_monocle$pseudotime
ggplot(as.data.frame(colData(deng_SCE)), 
       aes(x = pseudotime_monocle, 
           y = cell_type2, colour = cell_type2)) +
  geom_quasirandom(groupOnX = FALSE) +
  scale_color_tableau() + theme_classic() +
  xlab("monocle pseudotime") + ylab("Timepoint") +
  ggtitle("Cells ordered by monocle pseudotime")

## 8.4.4 Diffusion maps
## Raional: samples are from diffusion process.
#  low-dimensional manifold by estimating the 
#  eigenvalues and eigenvectors for the diffusion operator related to the data

deng <- logcounts(deng_SCE) # here use log
colnames(deng) <- cellLabels
dm <- DiffusionMap(t(deng))
## output:
## You have 22431 genes. Consider passing e.g. n_pcs = 50 to speed up computation.

## dm
## output:
## DiffusionMap (20 Diffusion components and 268 observations)

tmp <- data.frame(DC1 = eigenvectors(dm)[,1],
                  DC2 = eigenvectors(dm)[,2],
                  Timepoint = deng_SCE$cell_type2)
ggplot(tmp, aes(x = DC1, y = DC2, colour = Timepoint)) +
  geom_point() + scale_color_tableau() + 
  xlab("Diffusion component 1") + 
  ylab("Diffusion component 2") +
  theme_classic()

deng_SCE$pseudotime_diffusionmap <- rank(eigenvectors(dm)[,1])
ggplot(as.data.frame(colData(deng_SCE)), 
       aes(x = pseudotime_diffusionmap, 
           y = cell_type2, colour = cell_type2)) +
  geom_quasirandom(groupOnX = FALSE) +
  scale_color_tableau() + theme_classic() +
  xlab("Diffusion map pseudotime (first diffusion map component)") +
  ylab("Timepoint") +
  ggtitle("Cells ordered by diffusion map pseudotime")

## exercise 2: Additional eigenvectors

tmp2 <- data.frame(DC1 = eigenvectors(dm)[,1],
                  DC2 = eigenvectors(dm)[,2],
                  DC3 = eigenvectors(dm)[,3],
                  DC4 = eigenvectors(dm)[,4],
                  Timepoint = deng_SCE$cell_type2)

## output tmp2

#           DC1          DC2           DC3           DC4       Timepoint
#1    0.0284502749 -0.015735382 -0.0723698411  0.0283453441     16cell

ggplot(tmp2, aes(x = DC1, y = DC2, colour = Timepoint)) +
  geom_point() + scale_color_tableau() + 
  xlab("Diffusion component 1") + 
  ylab("Diffusion component 2") +
  theme_classic()

options(stringsAsFactors = FALSE)
deng_SCE$pseudotime_diffusionmap <- colRanks(as.matrix(tmp2[, c(1:2)]))
ggplot(as.data.frame(colData(deng_SCE)), 
       aes(x = pseudotime_diffusionmap, 
           y = cell_type2, colour = cell_type2)) +
  geom_quasirandom(groupOnX = FALSE) +
  scale_color_tableau() + theme_classic() +
  xlab("Diffusion map pseudotime (first diffusion map component)") +
  ylab("Timepoint") +
  ggtitle("Cells ordered by diffusion map pseudotime")

## exercise 3: USE M3DrOP

deng <- logcounts(deng_SCE) # here use log
colnames(deng) <- cellLabels

m3dGenes <- as.character(
  M3DropFeatureSelection(deng)$Gene
)
d_dif <- deng[which(rownames(deng) %in% m3dGenes), ]
d_dif  <- d_dif [!duplicated(rownames(d_dif )), ]

dm <- DiffusionMap(t(d_dif))
## output:
##You have 1736 genes. Consider passing e.g. n_pcs = 50 to speed up computation.
tmp <- data.frame(DC1 = eigenvectors(dm)[,1],
                  DC2 = eigenvectors(dm)[,2],
                  Timepoint = deng_SCE$cell_type2)
ggplot(tmp, aes(x = DC1, y = DC2, colour = Timepoint)) +
  geom_point() + scale_color_tableau() + 
  xlab("Diffusion component 1") + 
  ylab("Diffusion component 2") +
  theme_classic()

deng_SCE$pseudotime_diffusionmap <- rank(eigenvectors(dm)[,1])
ggplot(as.data.frame(colData(deng_SCE)), 
       aes(x = pseudotime_diffusionmap, 
           y = cell_type2, colour = cell_type2)) +
  geom_quasirandom(groupOnX = FALSE) +
  scale_color_tableau() + theme_classic() +
  xlab("Diffusion map pseudotime (first diffusion map component)") +
  ylab("Timepoint") +
  ggtitle("Cells ordered by diffusion map pseudotime")
